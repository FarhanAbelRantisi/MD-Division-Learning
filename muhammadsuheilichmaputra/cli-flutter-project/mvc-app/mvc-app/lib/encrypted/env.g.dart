// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    33,
    32,
    99,
    109,
    37,
    178,
    69,
    54,
    109,
    17,
    232,
    232,
    120,
    73,
    94,
    246,
    235,
    129,
    88,
    229,
    121,
    26,
    179,
    25,
    187,
    163,
    19,
    101,
    92,
    147,
    114,
    238,
    200,
    104,
    236,
    254,
    195,
    145,
    160,
    232,
    160,
    16,
    180,
    231,
    148,
    229,
    230,
    169,
    11,
    179,
    119,
    190,
    53,
    87,
    133,
    253,
    159,
    139,
    6,
    137,
    126,
    45,
    194,
    123,
    16,
    43,
    40,
    49,
    76,
    172,
    240,
    105,
    34,
    118,
    246,
    18,
    248,
    102,
    68,
    66,
    221,
    91,
    54,
    83,
    241,
    42,
    37,
    102,
    180,
    153,
    239,
    167,
    37,
    10,
    231,
    55,
    215,
    248,
    199,
    93,
    104,
    172,
    239,
    241,
    176,
    72,
    120,
    21,
    67,
    41,
    47,
    85,
    174,
    172,
    194,
    211,
    208,
    129,
    195,
    204,
    208,
    110,
    11,
    20,
    184,
    14,
    69,
    142,
    109,
    97,
    3,
    9,
    33,
    118,
    117,
    83,
    188,
    161,
    177,
    106,
    0,
    87,
    244,
    211,
    212,
    64,
    48,
    93,
    156,
    226,
    176,
    53,
    164,
    225,
    236,
    16,
    134,
    44,
    172,
    210,
    160,
    48,
    191,
    112,
    56,
    140,
    181,
    58,
    202,
    89,
    213,
    205,
    198,
    136,
    83,
    73,
    136,
    72,
    123,
    233,
    29,
    170,
    38,
    51,
    42,
    6,
    122,
    87,
    104,
    60,
    213,
    15,
    65,
    173,
    63,
    240,
    49,
    31,
    172,
    232,
    109,
    101,
    137,
    97,
    170,
    39,
    119,
    137,
    68,
    155,
    30,
    125,
    95,
    114,
    81,
    75,
    101,
    112,
    249,
    181,
    215,
    99,
    235,
    118,
    164,
    57,
    205,
    182,
    160,
    103,
    206,
    97,
    204,
    204,
    126,
    82,
    42,
    13,
    214,
    29,
    45,
    88,
    7,
    82,
    184,
    187,
    144,
    220,
    228,
    47,
    187,
    122,
    177,
    84,
    92,
    89,
    138,
    50,
    151,
    45,
    206,
    136,
    0,
    104,
    87,
    159,
    55,
    55,
    251,
    63,
    164,
    216,
    60,
    40,
    180,
    52,
    243,
    191,
    229,
    11,
    166,
    181,
    3,
    111,
    56,
    222,
    251,
    242,
    112,
    96,
    44,
    198,
    188,
    126,
    65,
    65,
    248,
    6,
    121,
    218,
    173,
    17,
    153,
    115,
    13,
    63,
    168,
    47,
    38,
    24,
    204,
    54,
    86,
    37,
    107,
    221,
    224,
    181,
    48,
    104,
    3,
    235,
    135,
    142,
    230,
    221,
    25,
    234,
    131,
    195,
    14,
    231,
    176,
    130,
    195,
    215,
    129,
    2,
    31,
    194,
    139,
    28,
    185,
    25,
    158,
    158,
    165,
    63,
    104,
    23,
    223,
    88,
    176,
    135,
    166,
    58,
    146,
    88,
    61,
    172,
    157,
    231,
    184,
    167,
    224,
    142,
    24,
    32,
    77,
    132,
    101,
    170,
    135,
    162,
    60,
    180,
    40,
    165,
    121,
    175,
    255,
    126,
    56,
    255,
    140,
    249,
    202,
    251,
    111,
    229,
    248,
    79,
    58,
    190,
    148,
    155,
    54,
    209,
    255,
    63,
    95,
    59,
    226,
    53,
    198,
    84,
    92,
    143,
    25,
    15,
    91,
    26,
    205,
    157,
    249,
    84,
    169,
    187,
    227,
    97,
    18,
    145,
    251,
    252,
    161,
    47,
    170,
    48,
    31,
    109,
    231,
    213,
    50,
    198,
    193,
    244,
    233,
    131,
    209,
    205,
    225,
    131,
    133,
    180,
    220,
    56,
    243,
    193
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
