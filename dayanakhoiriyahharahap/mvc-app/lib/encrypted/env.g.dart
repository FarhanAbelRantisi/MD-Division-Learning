// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    186,
    166,
    105,
    178,
    66,
    20,
    225,
    26,
    13,
    91,
    40,
    24,
    20,
    102,
    146,
    54,
    87,
    46,
    245,
    69,
    146,
    120,
    188,
    166,
    6,
    112,
    181,
    45,
    94,
    250,
    113,
    236,
    24,
    243,
    1,
    54,
    8,
    84,
    110,
    8,
    22,
    105,
    65,
    250,
    4,
    223,
    197,
    188,
    150,
    78,
    37,
    227,
    95,
    189,
    66,
    205,
    26,
    63,
    176,
    224,
    152,
    32,
    37,
    166,
    18,
    57,
    226,
    31,
    12,
    217,
    254,
    230,
    107,
    68,
    169,
    19,
    213,
    39,
    102,
    91,
    11,
    231,
    136,
    9,
    149,
    110,
    180,
    75,
    13,
    34,
    100,
    26,
    42,
    154,
    20,
    189,
    33,
    123,
    91,
    92,
    107,
    78,
    158,
    41,
    172,
    245,
    216,
    29,
    37,
    183,
    82,
    76,
    129,
    16,
    177,
    31,
    15,
    195,
    155,
    9,
    90,
    189,
    114,
    126,
    1,
    153,
    30,
    253,
    112,
    104,
    254,
    191,
    122,
    138,
    219,
    94,
    180,
    216,
    3,
    151,
    160,
    160,
    207,
    205,
    242,
    59,
    82,
    5,
    99,
    140,
    75,
    53,
    156,
    159,
    42,
    109,
    41,
    78,
    33,
    139,
    104,
    24,
    180,
    108,
    196,
    184,
    53,
    129,
    30,
    54,
    203,
    184,
    143,
    111,
    33,
    29,
    144,
    108,
    138,
    128,
    46,
    98,
    19,
    155,
    46,
    102,
    148,
    75,
    162,
    100,
    229,
    112,
    229,
    232,
    233,
    206,
    103,
    12,
    102,
    255,
    66,
    232,
    63,
    161,
    187,
    159,
    48,
    133,
    97,
    208,
    88,
    46,
    156,
    244,
    129,
    12,
    51,
    149,
    167,
    225,
    148,
    144,
    132,
    232,
    50,
    111,
    77,
    160,
    36,
    139,
    18,
    185,
    54,
    192,
    189,
    171,
    78,
    60,
    215,
    77,
    191,
    11,
    48,
    48,
    192,
    63,
    15,
    83,
    129,
    198,
    25,
    163,
    141,
    25,
    98,
    245,
    139,
    201,
    39,
    182,
    29,
    132,
    61,
    186,
    134,
    17,
    0,
    156,
    199,
    61,
    52,
    79,
    1,
    112,
    212,
    157,
    130,
    52,
    191,
    226,
    20,
    52,
    23,
    1,
    74,
    228,
    24,
    206,
    110,
    68,
    53,
    198,
    250,
    94,
    5,
    168,
    211,
    129,
    147,
    187,
    211,
    159,
    195,
    29,
    227,
    67,
    156,
    110,
    232,
    242,
    247,
    245,
    142,
    235,
    149,
    113,
    111,
    86,
    14,
    205,
    126,
    24,
    31,
    255,
    182,
    17,
    36,
    43,
    192,
    55,
    98,
    64,
    21,
    25,
    254,
    59,
    103,
    246,
    130,
    252,
    229,
    102,
    90,
    196,
    209,
    246,
    158,
    225,
    199,
    119,
    30,
    115,
    68,
    29,
    97,
    240,
    244,
    150,
    77,
    175,
    140,
    49,
    105,
    152,
    82,
    90,
    155,
    233,
    175,
    68,
    63,
    8,
    27,
    129,
    33,
    74,
    210,
    241,
    153,
    72,
    188,
    105,
    102,
    197,
    122,
    201,
    91,
    67,
    180,
    95,
    228,
    38,
    200,
    153,
    69,
    188,
    248,
    80,
    164,
    187,
    207,
    208,
    73,
    197,
    207,
    201,
    137,
    214,
    181,
    114,
    68,
    241,
    39,
    43,
    177,
    188,
    236,
    171,
    79,
    179,
    125,
    236,
    227,
    87,
    19,
    47,
    12,
    243,
    226,
    15,
    221,
    249,
    136,
    112,
    196,
    88,
    45,
    126,
    141,
    98,
    162,
    61,
    112,
    52,
    101,
    59,
    90,
    168,
    52,
    57,
    110,
    29,
    90,
    89,
    122,
    195,
    211,
    15,
    201,
    72,
    31,
    241,
    114,
    246
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
