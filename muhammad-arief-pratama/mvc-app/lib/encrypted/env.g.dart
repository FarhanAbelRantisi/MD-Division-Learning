// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    191,
    35,
    125,
    78,
    250,
    243,
    20,
    127,
    101,
    164,
    94,
    234,
    8,
    239,
    171,
    207,
    16,
    169,
    12,
    249,
    24,
    120,
    90,
    249,
    31,
    38,
    27,
    117,
    32,
    194,
    43,
    96,
    227,
    210,
    252,
    7,
    128,
    18,
    114,
    75,
    0,
    50,
    70,
    15,
    14,
    69,
    200,
    155,
    176,
    152,
    78,
    156,
    27,
    212,
    37,
    35,
    161,
    139,
    176,
    19,
    193,
    111,
    168,
    37,
    91,
    219,
    231,
    132,
    145,
    118,
    70,
    242,
    97,
    243,
    101,
    132,
    141,
    155,
    215,
    156,
    180,
    99,
    10,
    104,
    83,
    142,
    220,
    119,
    136,
    188,
    225,
    129,
    25,
    231,
    140,
    192,
    70,
    131,
    171,
    222,
    82,
    225,
    181,
    4,
    148,
    186,
    168,
    229,
    2,
    197,
    13,
    239,
    221,
    19,
    238,
    25,
    95,
    105,
    177,
    90,
    28,
    197,
    118,
    219,
    132,
    73,
    77,
    135,
    4,
    108,
    28,
    123,
    7,
    55,
    186,
    12,
    158,
    19,
    179,
    35,
    61,
    123,
    29,
    47,
    19,
    163,
    42,
    70,
    86,
    60,
    247,
    242,
    119,
    168,
    85,
    157,
    38,
    161,
    177,
    26,
    3,
    225,
    30,
    225,
    35,
    79,
    22,
    88,
    2,
    18,
    136,
    195,
    67,
    103,
    169,
    165,
    191,
    219,
    175,
    168,
    8,
    113,
    146,
    73,
    9,
    56,
    214,
    236,
    185,
    104,
    92,
    188,
    149,
    135,
    72,
    200,
    102,
    135,
    173,
    136,
    197,
    127,
    223,
    122,
    57,
    52,
    216,
    30,
    10,
    108,
    141,
    188,
    50,
    48,
    160,
    55,
    80,
    248,
    50,
    33,
    218,
    199,
    97,
    239,
    206,
    16,
    78,
    215,
    234,
    184,
    54,
    71,
    226,
    124,
    128,
    109,
    217,
    109,
    154,
    48,
    93,
    145,
    181,
    76,
    111,
    88,
    144,
    100,
    231,
    27,
    45,
    111,
    27,
    52,
    21,
    215,
    58,
    220,
    15,
    123,
    161,
    171,
    77,
    138,
    104,
    178,
    181,
    78,
    231,
    5,
    100,
    69,
    156,
    51,
    189,
    192,
    189,
    124,
    3,
    86,
    14,
    248,
    13,
    172,
    15,
    3,
    153,
    184,
    90,
    131,
    58,
    75,
    244,
    244,
    223,
    81,
    102,
    109,
    10,
    123,
    239,
    155,
    133,
    240,
    209,
    162,
    22,
    182,
    21,
    166,
    244,
    136,
    244,
    150,
    251,
    228,
    62,
    166,
    219,
    79,
    81,
    92,
    115,
    103,
    72,
    106,
    45,
    29,
    27,
    238,
    7,
    51,
    107,
    153,
    146,
    101,
    57,
    176,
    41,
    138,
    228,
    112,
    188,
    93,
    133,
    187,
    88,
    210,
    63,
    90,
    130,
    75,
    161,
    67,
    71,
    193,
    81,
    178,
    121,
    128,
    115,
    118,
    92,
    62,
    159,
    105,
    50,
    224,
    249,
    235,
    238,
    50,
    140,
    120,
    193,
    60,
    237,
    177,
    93,
    7,
    253,
    29,
    137,
    135,
    38,
    159,
    123,
    137,
    222,
    34,
    92,
    161,
    80,
    184,
    125,
    238,
    112,
    172,
    161,
    177,
    83,
    170,
    195,
    246,
    49,
    58,
    189,
    31,
    96,
    89,
    78,
    114,
    87,
    190,
    104,
    100
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
